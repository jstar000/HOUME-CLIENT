# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
language: 'ko-KR' # 리뷰 언어 설정
early_access: true # 얼리 액세스 기능 활성화

# 리뷰 톤 및 스타일 지정
tone_instructions: |
  TypeScript/React 19 전문가로서 한국어로 명확하고 건설적인 코드 리뷰를 제공합니다. 보안, 성능, 유지보수성에 중점을 두며, 중요한 문제가 아닌 한 간결하게 작성합니다.

reviews:
  profile: 'assertive' # 리뷰 스타일: assertive(엄격), chill(관대)
  request_changes_workflow: false
  high_level_summary: true # PR 요약 생성
  poem: false # 시(POEM) 생성 비활성화
  review_status: true # 리뷰 상태 표시
  assess_linked_issues: false # 연결된 이슈 분석
  related_prs: false # 관련 PR 표시
  suggested_labels: true # 라벨 자동 제안
  sequence_diagrams: true # 시퀀스 다이어그램 생성
  changed_files_summary: true # 변경된 파일 요약

  # 워크플로우 개선
  high_level_summary_in_walkthrough: true # 요약을 워크스루에 포함
  high_level_summary_placeholder: '이 PR의 주요 변경사항을 요약합니다'
  collapse_walkthrough: false # 워크스루 섹션 접기 비활성화
  commit_status: true # 커밋 상태 체크
  fail_commit_status: false # 커밋 실패 시 상태 체크 실패하지 않음
  related_issues: false # 관련 이슈 추적
  abort_on_close: true # PR 닫힐 때 리뷰 중단

  # 파일 경로 필터링 (프로젝트 구조에 맞춘 설정)
  path_filters:
    - '!node_modules/**'
    - '!dist/**'
    - '!storybook-static/**'
    - '!build/**'
    - '!coverage/**'
    - '!*.lock'
    - '!pnpm-lock.yaml'
    - '.storybook/vitest.setup.ts'
    - 'src/**'
    - '.storybook/**/*.ts'
    - 'vite.config.ts'
    - 'tsconfig*.json'
    - '.coderabbit.yaml'

  # 경로별 특별 지침 (구체적인 패턴부터 일반적인 패턴 순으로 배열)
  path_instructions:
    # 가장 구체적인 패턴들
    - path: '.coderabbit.yaml'
      instructions: |
        CodeRabbit 설정 파일 리뷰 시:
        - YAML 문법의 정확성 확인
        - 스키마 호환성 검증 (지원되지 않는 필드 사용 여부)
        - path_filters의 포함/제외 패턴 검토
        - path_instructions의 중복 또는 누락 확인
        - 프로젝트 구조와 설정의 일치성 검토

    - path: '**/*.stories.tsx'
      instructions: |
        Storybook 스토리 리뷰 시:
        - 모든 props 변형에 대한 스토리 작성
        - a11y 테스트 통과 여부
        - 적절한 문서화와 컨트롤 제공

    - path: 'src/**/components/**/*.tsx'
      instructions: |
        컴포넌트 파일 리뷰 시:
        - 파일명이 PascalCase인지 확인
        - Props 타입이 '컴포넌트명Props' 형식인지 확인
        - 단일 export는 default export 사용하는지 확인
        - 이벤트 핸들러는 handle로 시작하는지 확인

    - path: 'src/**/*.css.ts'
      instructions: |
        Vanilla Extract 스타일 파일 리뷰 시:
        - 디자인 토큰 활용 확인: colorVars 직접 사용, fontStyle() 함수를 통한 폰트 토큰 변환
        - fontStyle() 함수 사용법: ...fontStyle('토큰명') 형태로 스프레드 연산자와 함께 사용
        - recipe와 styleVariants 패턴의 적절한 사용
        - 반응형 스타일 구현 방식
        - 불필요한 중복 스타일 제거

    - path: 'src/**/*.ts'
      instructions: |
        TypeScript 파일 리뷰 시:
        - 타입명에 -Types 접미사가 있는지 확인 (Props 제외)
        - interface는 객체 타입, type은 union/별칭에 사용하는지 확인
        - API Response는 XXXResponse 네이밍 따르는지 확인
        - var 사용 금지, const 우선 사용 확인

    # 중간 수준의 구체적인 패턴들
    - path: 'src/shared/components/**'
      instructions: |
        공통 컴포넌트 리뷰 시 다음 사항을 중점적으로 검토해주세요:
        - TypeScript 타입 정의의 정확성과 제네릭 활용
        - 높은 재사용성을 위한 props 설계
        - 성능 최적화 (memo, useMemo, useCallback)
        - 일관된 API 디자인과 명명 규칙
        - 접근성(a11y) 준수

    - path: 'src/pages/**/components/**'
      instructions: |
        페이지별 컴포넌트 리뷰 시:
        - 해당 페이지의 도메인 로직과 긴밀한 결합 확인
        - 재사용 가능한 컴포넌트는 shared로 이동 제안
        - 페이지 특화 타입과 상수의 적절한 활용 확인

    - path: 'src/**/apis/**'
      instructions: |
        API 레이어 리뷰 시:
        - axiosInstance의 일관된 사용
        - TanStack Query 훅과의 적절한 통합
        - 에러 처리 패턴의 일관성
        - 타입 안정성 확보
        - HTTP메서드 + 명사 네이밍 규칙 확인 (getUserList, postComment 등)
        - async/await 패턴 일관성 확인

    - path: 'src/**/constants/**'
      instructions: |
        상수 파일 리뷰 시:
        - 모든 상수가 BIG_SNAKE_CASE로 작성되었는지 확인
        - export const 사용 확인
        - 의미있는 이름 사용 여부 확인

    # 가장 일반적인 패턴 (마지막에 배치)
    - path: 'src/**'
      instructions: |
        전체 프로젝트 코드 리뷰 시:

        # 기본 규칙
        - 모든 컴포넌트는 반드시 TypeScript로 작성
        - SVG는 ?react 쿼리를 통해 React 컴포넌트로 임포트
        - 스타일은 반드시 Vanilla Extract(.css.ts)로 작성
        - 절대 경로 임포트 사용 (@pages, @shared 등)
        - overlay-kit을 통한 모달 관리 패턴 준수

        # 네이밍 컨벤션
        - 컴포넌트와 클래스는 PascalCase 사용
        - 폴더명은 camelCase 사용
        - 파일명은 camelCase 사용 (컴포넌트 파일 제외)
        - 변수와 함수는 camelCase 사용
        - 상수는 BIG_SNAKE_CASE 사용
        - TypeScript 타입은 -Types 접미사 사용 (Props 제외)
        - Props 타입은 컴포넌트명 + Props 형식
        - API Response 타입은 XXXResponse 형식
        - 함수 네이밍: get/create/check/handle/is/has/can 접두사 활용
        - API 함수는 HTTP메서드 + 명사 형식 (getUserList, postComment)

        # 보안 및 성능
        - 환경 변수는 반드시 import.meta.env 사용
        - API 키나 시크릿을 하드코딩하지 않음
        - React.memo, useMemo, useCallback의 적절한 사용
        - 큰 번들 사이즈 경고 (dynamic import 제안)
        - 템플릿 리터럴 사용 권장 (문자열 조합 시)
        - 구조 분해 할당 적극 활용

        # 커밋 및 브랜치 패턴
        - 커밋 타입: feat, fix, docs, style, refactor, test, chore, design, comment, rename, remove
        - 브랜치 패턴: type/description/#issue-number 형식

  auto_review:
    enabled: true # 자동 리뷰 활성화
    drafts: false # 드래프트 리뷰 사용 여부
    ignore_title_keywords: # 특정 키워드가 포함된 PR 제목 무시
      - '[docs]'
      - '[skip-review]'

  # 코드 개선 기능 (finishing_touches)
  finishing_touches:
    docstrings:
      enabled: true
    unit_tests:
      enabled: true

  # TypeScript/React 환경에 최적화된 도구들 (실제 사용하는 것만)
  tools:
    eslint:
      enabled: true # TypeScript/React 린팅
    languagetool:
      enabled: true # 한국어 문법 검사
      level: 'default'
    markdownlint:
      enabled: true # 문서 품질 검사
    gitleaks:
      enabled: true # 보안 비밀 정보 스캔
    yamllint:
      enabled: true # YAML 파일 검증
    actionlint:
      enabled: true # GitHub Actions 검증

# 채팅 설정
chat:
  auto_reply: true # AI 자동 답변 활성화

# 지식 베이스 설정
knowledge_base:
  web_search:
    enabled: true # 웹 검색 기능 활성화

# 코드 생성 설정
code_generation:
  docstrings:
    language: 'ko-KR' # 독스트링을 한국어로 생성
  unit_tests: {} # 유닛 테스트 생성 (기본값 사용)
